{"version":3,"sources":["components/home.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["useStyles","makeStyles","theme","option","fontSize","marginRight","root","flexGrow","marginTop","Home","classes","useState","countries","setCountries","country","setCountry","cities","setCities","city","setCity","pollutionData","setPollutionData","showChart","setShowChart","Date","selectedDate","setSelectedDate","showNotFound","setShowNotFound","showSpinner","setShowSpinner","handleDateChange","date","a","console","dir","toDateObject","getTime","setHours","getHours","fromDate","getDate","toDate","log","axios","code","name","result","data","results","length","seperatedByParameters","seperateByParameters","alert","dateObject","dd","String","padStart","mm","getMonth","getFullYear","today","measurements","forEach","measurement","parameter","useEffect","cachedCountries","localStorage","getItem","cacheParsed","JSON","parse","then","validCountries","filter","setItem","stringify","catch","err","className","style","textAlign","Grid","container","spacing","justify","item","Autocomplete","id","width","options","onChange","event","value","countrySelected","autoHighlight","getOptionLabel","renderOption","Fragment","renderInput","params","inputProps","autoComplete","TextField","label","variant","citySelected","utils","DateFnsUtils","margin","format","KeyboardButtonProps","Object","keys","map","validData","times","time","utc","obj","x","y","push","xType","height","title","unit","CircularProgress","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c21957c0.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport TextField from '@material-ui/core/TextField';\nimport 'date-fns';\nimport DateFnsUtils from '@date-io/date-fns';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nimport {\n  MuiPickersUtilsProvider,\n  KeyboardDatePicker,\n} from '@material-ui/pickers';\n\nimport {\n  XYPlot,\n  XAxis,\n  YAxis,\n  HorizontalGridLines,\n  VerticalGridLines,\n  LineSeries,\n} from 'react-vis';\nimport '../../node_modules/react-vis/dist/style.css';\n\nimport Grid from '@material-ui/core/Grid';\n\nconst useStyles = makeStyles((theme) => ({\n  option: {\n    fontSize: 15,\n    '& > span': {\n      marginRight: 10,\n      fontSize: 18,\n    },\n  },\n  root: {\n    flexGrow: 1,\n    marginTop: '30px',\n  },\n}));\n\nfunction Home() {\n  const classes = useStyles();\n  const [countries, setCountries] = useState<any>([]);\n  const [country, setCountry] = useState<any>({});\n  const [cities, setCities] = useState([]);\n  const [city, setCity] = useState<any>({});\n\n  const [pollutionData, setPollutionData] = useState<any>({});\n  const [showChart, setShowChart] = useState(false);\n  const [selectedDate, setSelectedDate] = useState(new Date());\n  const [showNotFound, setShowNotFound] = useState(false);\n  const [showSpinner, setShowSpinner] = useState(false);\n\n  const handleDateChange = async (date: Date | null) => {\n    if (date) {\n      setShowSpinner(true);\n      setShowChart(false);\n      setShowNotFound(false);\n\n      console.dir(date);\n      let toDateObject = new Date(date.getTime());\n      toDateObject.setHours(toDateObject.getHours() + 24);\n\n      const fromDate = getDate(date);\n      const toDate = getDate(toDateObject);\n\n      setSelectedDate(date);\n      console.log(date.getTime());\n      if (country && city) {\n        try {\n          const result = await axios(\n            `https://api.openaq.org/v1/measurements?country=${country.code}&city=${city.name}&date_from=${fromDate}&date_to=${toDate}`\n          );\n          setShowSpinner(false);\n          setShowChart(true);\n\n          if (result.data.results.length == 0) {\n            setShowNotFound(true);\n          } else {\n            setShowNotFound(false);\n          }\n          const seperatedByParameters = seperateByParameters(\n            result.data.results\n          );\n          setShowChart(true);\n          setPollutionData(seperatedByParameters);\n        } catch (err) {\n          setShowSpinner(false);\n\n          alert('Oops something went wrong, Please refresh and try again!!');\n        }\n      }\n    }\n  };\n  const getDate = (dateObject: Date): string => {\n    const dd = String(dateObject.getDate()).padStart(2, '0');\n    const mm = String(dateObject.getMonth() + 1).padStart(2, '0'); //January is 0!\n    const yyyy = dateObject.getFullYear();\n\n    const date = yyyy + '-' + mm + '-' + dd;\n    return date;\n  };\n  useEffect(() => {\n    const cachedCountries = localStorage.getItem('countries');\n    setShowSpinner(true);\n    setShowNotFound(false);\n\n    if (cachedCountries) {\n      const cacheParsed = JSON.parse(cachedCountries);\n      setShowSpinner(false);\n\n      setCountries(cacheParsed);\n    }\n\n    axios('https://api.openaq.org/v1/countries')\n      .then(({ data }) => {\n        setShowSpinner(false);\n\n        console.log(data.results);\n        const countryData = data.results;\n        const validCountries = countryData.filter(\n          (country: any) => country.name\n        );\n        console.log(validCountries);\n        localStorage.setItem('countries', JSON.stringify(validCountries));\n\n        setCountries(validCountries);\n      })\n      .catch((err) => {\n        setShowSpinner(false);\n\n        alert('Oops something went wrong, Please refresh and try again!!');\n      });\n  }, []);\n\n  useEffect(() => {}, [showSpinner, showNotFound]);\n\n  async function countrySelected(country: any) {\n    if (country) {\n      setCountry(country);\n      setShowSpinner(true);\n      setShowChart(false);\n      setShowNotFound(false);\n      setSelectedDate(new Date());\n\n      try {\n        const result = await axios(\n          `https://api.openaq.org/v1/cities?country=${country.code}`\n        );\n        setShowSpinner(false);\n\n        console.log(result);\n        setCities(result.data.results);\n      } catch (err) {\n        setShowSpinner(false);\n\n        alert('Oops something went wrong, Please refresh and try again!!');\n      }\n    }\n  }\n\n  async function citySelected(city: any) {\n    if (city) {\n      const today = getDate(new Date());\n      setShowSpinner(true);\n      setShowChart(false);\n      setShowNotFound(false);\n      setSelectedDate(new Date());\n\n      setCity(city);\n      try {\n        const result = await axios(\n          `https://api.openaq.org/v1/measurements?country=${country.code}&city=${city.name}&date_from=${today}`\n        );\n        setShowSpinner(false);\n        setShowChart(true);\n\n        if (result.data.results.length == 0) {\n          setShowNotFound(true);\n        } else {\n          setShowNotFound(false);\n        }\n\n        const seperatedByParameters = seperateByParameters(result.data.results);\n        setShowChart(true);\n        setPollutionData(seperatedByParameters);\n      } catch (err) {\n        setShowSpinner(false);\n\n        alert('Oops something went wrong, Please refresh and try again!!');\n      }\n    }\n  }\n\n  function seperateByParameters(measurements: any) {\n    const seperatedByParameters: any = {};\n    measurements.forEach((measurement: any) => {\n      seperatedByParameters[measurement.parameter] = seperatedByParameters[\n        measurement.parameter\n      ]\n        ? [...seperatedByParameters[measurement.parameter], measurement]\n        : [measurement];\n    });\n    console.log(seperatedByParameters);\n    return seperatedByParameters;\n  }\n\n  return (\n    <div className={classes.root}>\n      <p style={{ fontSize: '40px', textAlign: 'center' }}>Pollution Data</p>\n      <Grid container spacing={3} justify='center'>\n        {countries && countries.length > 0 && (\n          <Grid item>\n            <Autocomplete\n              id='country-select-demo'\n              style={{ width: 300 }}\n              options={countries}\n              onChange={(event, value) => countrySelected(value)}\n              classes={{\n                option: classes.option,\n              }}\n              autoHighlight\n              getOptionLabel={(option: any) => option.name}\n              renderOption={(option) => (\n                <React.Fragment>{option.name}</React.Fragment>\n              )}\n              renderInput={(params: any) => {\n                const inputProps = params.inputProps;\n                inputProps.autoComplete = 'off';\n                return (\n                  <TextField\n                    {...params}\n                    label='Choose a country'\n                    variant='outlined'\n                    inputProps={{\n                      ...params.inputProps,\n                      autoComplete: 'off', // disable autocomplete and autofill\n                    }}\n                  />\n                );\n              }}\n            />\n          </Grid>\n        )}\n        {cities.length > 0 && (\n          <Grid item>\n            <Autocomplete\n              id='city-select-demo'\n              style={{ width: 300 }}\n              options={cities}\n              onChange={(event, value) => citySelected(value)}\n              classes={{\n                option: classes.option,\n              }}\n              autoHighlight\n              getOptionLabel={(option: any) => option.name}\n              renderOption={(option) => (\n                <React.Fragment>\n                  {/* <span>{countryToFlag(option.code)}</span> */}\n                  {option.name}\n                </React.Fragment>\n              )}\n              renderInput={(params) => (\n                <TextField\n                  autoComplete='off'\n                  {...params}\n                  label='Choose a city'\n                  variant='outlined'\n                  inputProps={{\n                    ...params.inputProps,\n                    autoComplete: 'off', // disable autocomplete and autofill\n                  }}\n                />\n              )}\n            />\n          </Grid>\n        )}\n\n        {showChart && (\n          <Grid item container justify='flex-end'>\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\n              <KeyboardDatePicker\n                margin='normal'\n                id='date-picker-dialog'\n                label='Date picker dialog'\n                format='MM/dd/yyyy'\n                value={selectedDate}\n                onChange={handleDateChange}\n                KeyboardButtonProps={{\n                  'aria-label': 'change date',\n                }}\n              />\n            </MuiPickersUtilsProvider>\n          </Grid>\n        )}\n      </Grid>\n      <Grid container justify='center'>\n        {showChart &&\n          Object.keys(pollutionData).map((parameter: any) => {\n            let validData: any[] = [];\n            let times: any = {};\n            pollutionData[parameter].forEach((data: any) => {\n              const time = new Date(data.date.utc).getTime();\n              if (!times[time]) {\n                let obj: any = {};\n                obj.x = new Date(data.date.utc).getTime();\n                obj.y = data.value;\n                validData.push(obj);\n              }\n              times[time] = time;\n            });\n            return (\n              <div key={parameter}>\n                <p>{pollutionData[parameter][0].parameter} Levels </p>\n                <XYPlot xType='time' width={1300} height={300}>\n                  <HorizontalGridLines />\n                  <VerticalGridLines />\n                  <XAxis title='Time' />\n                  <YAxis title={pollutionData[parameter][0].unit} />\n                  <LineSeries data={validData} />\n                </XYPlot>\n              </div>\n            );\n          })}\n        {showNotFound && <p>Didn't get data for this date. Try another</p>}\n        {showSpinner && (\n          <CircularProgress style={{ marginTop: '30px' }}></CircularProgress>\n        )}\n      </Grid>\n    </div>\n  );\n}\n\nexport default Home;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Home from './components/home';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <Home></Home>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}